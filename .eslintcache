[{"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/index.js":"1","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/App.js":"2","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Context/auth-context.js":"3","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Hooks/auth-hooks.js":"4","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Home/Home.js":"5","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Demand/Demand.js":"6","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Auth/Auth.js":"7","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Demand/NewDemand.js":"8","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Nav/MainNav.js":"9","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Public/AllUsers.js":"10","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Public/Profil.js":"11","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Public/NoRight.js":"12","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Private/Conv.js":"13","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Private/userMessages.js":"14","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Hooks/http-hook.js":"15","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Hooks/form-hook.js":"16","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Modal.js":"17","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/ErrorModal.js":"18","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Waitings.js":"19","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Conv/OneConv.js":"20","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Input.js":"21","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/util/validators.js":"22","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Avatar.js":"23","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Backdrop.js":"24","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/IconSvg.js":"25","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Button.js":"26","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Confimationmodal.js":"27","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Admin/Admin.js":"28"},{"size":381,"mtime":1612127399000,"results":"29","hashOfConfig":"30"},{"size":2726,"mtime":1618494397217,"results":"31","hashOfConfig":"30"},{"size":178,"mtime":1614115623000,"results":"32","hashOfConfig":"30"},{"size":1753,"mtime":1617955170085,"results":"33","hashOfConfig":"30"},{"size":4766,"mtime":1618405216337,"results":"34","hashOfConfig":"30"},{"size":9831,"mtime":1618489337391,"results":"35","hashOfConfig":"30"},{"size":13508,"mtime":1618405196598,"results":"36","hashOfConfig":"30"},{"size":15450,"mtime":1618492495705,"results":"37","hashOfConfig":"30"},{"size":1394,"mtime":1618494502057,"results":"38","hashOfConfig":"30"},{"size":6091,"mtime":1618405269773,"results":"39","hashOfConfig":"30"},{"size":5233,"mtime":1618409259734,"results":"40","hashOfConfig":"30"},{"size":197,"mtime":1614116239000,"results":"41","hashOfConfig":"30"},{"size":4813,"mtime":1618405226402,"results":"42","hashOfConfig":"30"},{"size":7073,"mtime":1618405256437,"results":"43","hashOfConfig":"30"},{"size":1473,"mtime":1618318246066,"results":"44","hashOfConfig":"30"},{"size":1544,"mtime":1614117766000,"results":"45","hashOfConfig":"30"},{"size":1780,"mtime":1618240236671,"results":"46","hashOfConfig":"30"},{"size":1273,"mtime":1618240348777,"results":"47","hashOfConfig":"30"},{"size":1198,"mtime":1618254300851,"results":"48","hashOfConfig":"30"},{"size":346,"mtime":1617958155190,"results":"49","hashOfConfig":"30"},{"size":2403,"mtime":1617783825060,"results":"50","hashOfConfig":"30"},{"size":1674,"mtime":1612344464000,"results":"51","hashOfConfig":"30"},{"size":515,"mtime":1617974303849,"results":"52","hashOfConfig":"30"},{"size":329,"mtime":1618220341031,"results":"53","hashOfConfig":"30"},{"size":1107,"mtime":1618128544387,"results":"54","hashOfConfig":"30"},{"size":1809,"mtime":1618422223691,"results":"55","hashOfConfig":"30"},{"size":1738,"mtime":1618318220984,"results":"56","hashOfConfig":"30"},{"size":19043,"mtime":1618514426819,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"vpurtp",{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/index.js",[],["121","122"],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/App.js",["123"],"import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nimport { useAuth } from \"./Hooks/auth-hooks\";\nimport { AuthContext } from \"./Context/auth-context\";\n\nimport MainNav from \"./Components/Nav/MainNav\";\nimport Home from \"./Pages/Home/Home\";\nimport Allusers from \"./Pages/User/Public/AllUsers\";\nimport Profil from \"./Pages/User/Public/Profil\";\nimport UserMessages from \"./Pages/User/Private/userMessages\";\nimport Conv from \"./Pages/User/Private/Conv\";\nimport Auth from \"./Pages/Auth/Auth\";\nimport NoRight from \"./Pages/User/Public/NoRight\";\nimport Demand from \"./Pages/Demand/Demand\";\nimport NewDemand from \"./Pages/Demand/NewDemand\";\nimport Admin from \"./Pages/Admin/Admin\";\n\n//import Waitings from \"./Components/Shared/Waitings\";\n\nfunction App() {\n  const { token, login, logout, UserId, UserImg } = useAuth();\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact={true}>\n          <Home />\n        </Route>\n        <Route path=\"/demand\" exact={true}>\n          <Demand />\n        </Route>\n        <Route path=\"/demand/new\" exact={true}>\n          <NewDemand />\n        </Route>\n        <Route path=\"/user/allusers\" exact={true}>\n          <Allusers />\n        </Route>\n        <Route path=\"/conv/:convId\" exact={true}>\n          <UserMessages />\n        </Route>\n        <Route path=\"/:userId/conv\" exact={true}>\n          <Conv />\n        </Route>\n        <Route path=\"/:userId/profil\" exact={true}>\n          <Profil />\n        </Route>\n        <Route path=\"/:userId/admin\" exact={true}>\n          <Admin />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact={true}>\n          <Home />\n        </Route>\n        <Route path=\"/conv/:convId\" exact={true}>\n          <NoRight />\n        </Route>\n        <Route path=\"/demand\" exact={true}>\n          <NoRight />\n        </Route>\n        <Route path=\"/:userId/conv\" exact={true}>\n          <NoRight />\n        </Route>\n        <Route path=\"/user/allusers\" exact={true}>\n          <Allusers />\n        </Route>\n        <Route path=\"/:userId/profil\" exact={true}>\n          <Profil />\n        </Route>\n        <Route path=\"/:userId/admin\" exact={true}>\n          <NoRight />\n        </Route>\n\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        login: login,\n        logout: logout,\n        userId: UserId,\n        UserImg: UserImg,\n      }}\n    >\n      <Router>\n        <MainNav />\n        {routes}\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Context/auth-context.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Hooks/auth-hooks.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Home/Home.js",["124","125","126"],"import React, { useState, useContext, useEffect } from \"react\";\n\nimport { AuthContext } from \"../../Context/auth-context\";\nimport { useHttpClient } from \"../../Hooks/http-hook\";\n\nimport \"./Home.css\";\n\nimport connectsvg from \"../../File/svg/Connect.svg\";\nimport AllUser from \"../../File/svg/AllUser.svg\";\nimport postsvg from \"../../File/svg/Post.svg\";\nimport Auth from \"../Auth/Auth\";\nimport Avatar from \"../../Components/Shared/Avatar\";\nimport IconSvg from \"../../Components/Shared/IconSvg\";\nimport demandsvg from \"../../File/svg/demande.svg\";\nimport msgsvg from \"../../File/svg/msg.svg\";\nimport disconnectsvg from \"../../File/svg/disconnect.svg\";\nimport profilsvg from \"../../File/svg/profile.svg\";\nimport adminsvg from \"../../File/svg/admin.svg\";\n\nconst Home = () => {\n  const [showauth, setshowauth] = useState(false);\n  const [user, setUser] = useState(null);\n\n  const HancleclickAuth = () => {\n    setshowauth((prevstate) => !prevstate);\n  };\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const auth = useContext(AuthContext);\n\n  useEffect(() => {\n    if (auth.userId) {\n      const sendReq = async () => {\n        try {\n          const response = await sendRequest(\n            `${process.env.REACT_APP_BACKENDURL}/api/user/${auth.userId}`\n          );\n          setUser(response);\n        } catch (err) {}\n      };\n      sendReq();\n    }\n  }, [auth, sendRequest]);\n\n  return (\n    <div className=\"homepage\">\n      {!auth.token && (\n        <React.Fragment>\n          <Auth show={showauth} onCancel={HancleclickAuth} />\n          <IconSvg\n            src={connectsvg}\n            alt={\"connect\"}\n            width=\"195px\"\n            text=\"Connect\"\n            onClick={HancleclickAuth}\n            borderRadius=\"65px\"\n          ></IconSvg>\n          <div className=\"IconContainer\">\n            <IconSvg\n              link=\"/user/allusers\"\n              src={AllUser}\n              alt={\"connect\"}\n              width=\"100px\"\n              text=\"All Users\"\n              borderRadius=\"33px\"\n              className=\"UnconnectedIndividualIcon\"\n            ></IconSvg>\n            <IconSvg\n              link=\"/user/allusers\"\n              src={postsvg}\n              alt={\"connect\"}\n              width=\"100px\"\n              text=\"Posts\"\n              borderRadius=\"33px\"\n              className=\"UnconnectedIndividualIcon\"\n            ></IconSvg>\n          </div>\n        </React.Fragment>\n      )}\n      {auth.userId && user && (\n        <React.Fragment>\n          <Avatar image={user.image} width=\"206px\"></Avatar>\n          <div className=\"IconContainerConnect\">\n            <IconSvg\n              link=\"/demand\"\n              src={demandsvg}\n              alt={\"connect\"}\n              width=\"100px\"\n              text=\"My demands\"\n              borderRadius=\"33px\"\n              className=\"connectedIndividualIcon\"\n            />\n            <IconSvg\n              link=\"/user/allusers\"\n              src={AllUser}\n              alt={\"connect\"}\n              width=\"100px\"\n              text=\"All Users\"\n              borderRadius=\"33px\"\n              className=\"connectedIndividualIcon\"\n            />\n            <IconSvg\n              link={`/${auth.userId}/conv`}\n              src={msgsvg}\n              alt={\"connect\"}\n              width=\"100px\"\n              text=\"My msg\"\n              borderRadius=\"33px\"\n              className=\"connectedIndividualIcon\"\n            />\n            <IconSvg\n              link=\"/user/allusers\"\n              src={postsvg}\n              alt={\"connect\"}\n              width=\"100px\"\n              text=\"My post\"\n              borderRadius=\"33px\"\n              className=\"connectedIndividualIcon\"\n            />\n            <IconSvg\n              link={`/${auth.userId}/profil`}\n              src={profilsvg}\n              alt={\"connect\"}\n              width=\"100px\"\n              text=\"My profile\"\n              borderRadius=\"33px\"\n              className=\"connectedIndividualIcon\"\n            />\n            <IconSvg\n              src={disconnectsvg}\n              alt={\"disconnect\"}\n              width=\"100px\"\n              text=\"Disconnect\"\n              borderRadius=\"33px\"\n              className=\"connectedIndividualIcon\"\n              onClick={auth.logout}\n            />\n          </div>\n          {(user.role === \"bureau\" ||\n            user.role === \"responsable\" ||\n            user.role === \"Master\") && (\n            <IconSvg\n              src={adminsvg}\n              alt={\"admin\"}\n              width=\"100px\"\n              text=\"Admin\"\n              borderRadius=\"33px\"\n              className=\"connectedIndividualIcon\"\n              link={`/${auth.userId}/admin`}\n            />\n          )}\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Demand/Demand.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Auth/Auth.js",["127","128","129"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useHttpClient } from \"../../Hooks/http-hook\";\n\nimport Input from \"../../Components/Shared/Input\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../util/validators\";\nimport { AuthContext } from \"../../Context/auth-context\";\n\nimport { useForm } from \"../../Hooks/form-hook\";\nimport Modal from \"../../Components/Shared/Modal\";\nimport Button from \"../../Components/Shared/Button\";\n\nimport svgquit from \"../../File/svg/croix.svg\";\n\nconst Auth = (props) => {\n  const [isLoginMode, setIsLoginMode] = useState(props.change ? false : true);\n  const [errorText, setErrorText] = useState(null);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const auth = useContext(AuthContext);\n  const initial = !props.change\n    ? {\n        password: {\n          value: \"\",\n          isValid: false,\n        },\n        email: {\n          value: \"\",\n          isValid: false,\n        },\n      }\n    : {\n        name: {\n          value: \"\",\n          isValid: true,\n        },\n        firstName: {\n          value: \"\",\n          isValid: true,\n        },\n        Bio: {\n          value: \"\",\n          isValid: true,\n        },\n        image: {\n          value: \"\",\n          isValid: true,\n        },\n      };\n  const [authState, inputhandler, setformData] = useForm(\n    initial,\n    props.change ? true : false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setformData(\n        {\n          ...authState.inputs,\n          name: undefined,\n          firstName: undefined,\n          Bio: undefined,\n          image: undefined,\n        },\n        authState.inputs.email.isValid && authState.inputs.password.isValid\n      );\n    } else {\n      setformData(\n        {\n          ...authState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          firstName: {\n            value: \"\",\n            isValid: false,\n          },\n          Bio: {\n            value: \"\",\n            isValid: true,\n          },\n          image: {\n            value: \"\",\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n  const userUpdateSubmitHandler = async (e) => {\n    e.preventDefault();\n    if (isLoginMode) {\n      try {\n        const response = await fetch(\n          `${process.env.REACT_APP_BACKENDURL}/api/user/log`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              email: authState.inputs.email.value,\n              password: authState.inputs.password.value,\n            }),\n          }\n        );\n        const responseData = await response.json();\n        if (response.status === 201) {\n          auth.login(\n            responseData.userId,\n            responseData.token,\n            responseData.UserImg\n          );\n          props.onCancel();\n        } else {\n          setErrorText(responseData.message);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        const response = await fetch(\n          `${process.env.REACT_APP_BACKENDURL}/api/user/sgnp`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              email: authState.inputs.email.value,\n              password: authState.inputs.password.value,\n              bio: authState.inputs.Bio.value,\n              name: authState.inputs.name.value,\n              firstName: authState.inputs.firstName.value,\n              image: authState.inputs.image.value,\n              status: status,\n              likes: likes,\n            }),\n          }\n        );\n\n        const responseData = await response.json();\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n  const cancelHandler = () => {\n    props.onCancel();\n    setErrorText(null);\n  };\n\n  const [style, setstyle] = useState(\"calc((100vh - 529px) / 2)\");\n\n  useEffect(() => {\n    const top2 =\n      (window.innerHeight - 880) / 2 > 0 ? (window.innerHeight - 880) / 2 : 0;\n    const top1 =\n      (window.innerHeight - 529) / 2 > 0 ? (window.innerHeight - 529) / 2 : 0;\n    setstyle(() => (isLoginMode ? `${top1}px` : `${top2}px`));\n  }, [isLoginMode]);\n\n  const explicationHandler = (text) => {\n    setErrorText(text);\n  };\n\n  //managing like\n  const [likes, setlikes] = useState(props.change ? props.user.likes : []);\n\n  //transitionninglike\n  const [transition, settransition] = useState(null);\n\n  //removelikehanle\n  const removelikehandle = (like) => {\n    settransition(like);\n    setTimeout(() => {\n      setlikes((prevlikes) => prevlikes.filter((prvlike) => prvlike !== like));\n      settransition(null);\n    }, 500);\n  };\n\n  //state of adding\n  const [adding, setadd] = useState(null);\n\n  //value adding\n  const [myval, setmyval] = useState(\"\");\n\n  const addhandler = () => {\n    setadd(true);\n    setmyval(\"\");\n  };\n  const validateHandle = () => {\n    if (myval !== \"\" && !likes.includes(myval) && myval.length < 21) {\n      setlikes((prevlikes) => prevlikes.concat([myval]));\n      setErrorText(null);\n    }\n    if (likes.includes(myval)) {\n      setErrorText(\"You cannot have 2 identiques like\");\n    }\n    if (myval.length > 20) {\n      setErrorText(\"One like should be below 20 charactre\");\n    }\n\n    setadd(false);\n  };\n  const changevalhandler = (e) => {\n    setmyval(e.target.value);\n  };\n  const [status, setstatus] = useState(\n    props.change ? props.user.status : \"public\"\n  );\n  const changeStatusHandler = (status) => {\n    setstatus(status);\n  };\n\n  const changehandlersend = async (e) => {\n    e.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKENDURL}/api/user/${auth.userId}`,\n        \"PATCH\",\n        JSON.stringify({\n          bio: authState.inputs.Bio.value,\n          name: authState.inputs.name.value,\n          firstName: authState.inputs.firstName.value,\n          image: authState.inputs.image.value,\n          status: status,\n          likes: likes,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      props.onCancelreload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <React.Fragment>\n      <Modal\n        top={style}\n        //transform={!isLoginMode ? \"translateY(-140px)\" : \"\"}\n        show={props.show}\n        onCancel={cancelHandler}\n      >\n        <form\n          onSubmit={!props.change ? userUpdateSubmitHandler : changehandlersend}\n        >\n          {!props.change && (\n            <Input\n              prop\n              id=\"email\"\n              element=\"input\"\n              type=\"text\"\n              label=\"Email\"\n              //errorText=\"please enter a valid email\"\n              validators={[VALIDATOR_EMAIL()]}\n              onInput={inputhandler}\n            />\n          )}\n          {!props.change && (\n            <Input\n              id=\"password\"\n              element=\"input\"\n              type=\"password\"\n              label=\"Password\"\n              //errorText=\"Your password must be at least 8characteres\"\n              validators={[VALIDATOR_MINLENGTH(8)]}\n              onInput={inputhandler}\n            />\n          )}\n          {!isLoginMode && (\n            <Input\n              id=\"name\"\n              element=\"input\"\n              type=\"text\"\n              label=\"Nom\"\n              initialvalid\n              validators={[VALIDATOR_REQUIRE()]}\n              onInput={inputhandler}\n              initialvalue={`${props.change ? props.user.name : \"\"}`}\n            />\n          )}\n          {!isLoginMode && (\n            <Input\n              id=\"firstName\"\n              element=\"input\"\n              type=\"text\"\n              initialvalid\n              label=\"Prenom\"\n              validators={[VALIDATOR_REQUIRE()]}\n              onInput={inputhandler}\n              initialvalue={`${props.change ? props.user.firstname : \"\"}`}\n            />\n          )}\n\n          {!isLoginMode && (\n            <Input\n              id=\"image\"\n              element=\"input\"\n              type=\"text\"\n              label=\"Image Url\"\n              onInput={inputhandler}\n              initialvalid\n              explication\n              initialvalue={`${props.change ? props.user.image : \"\"}`}\n              onClickexplication={() =>\n                explicationHandler(\n                  \"GatsunWeb doesn't accept directy file for the moment. Please give a link\"\n                )\n              }\n            ></Input>\n          )}\n          {!isLoginMode && (\n            <Input\n              id=\"Bio\"\n              type=\"text\"\n              label=\"Bio\"\n              height=\"90px\"\n              initialvalid\n              borderRadius=\"16px\"\n              onInput={inputhandler}\n              explication\n              initialvalue={`${props.change ? props.user.bio : \"\"}`}\n              onClickexplication={() =>\n                explicationHandler(\"Your bio describe yourself in a few word\")\n              }\n            />\n          )}\n          {!isLoginMode && (\n            <div className=\"form-control\">\n              <label>Likes</label>\n\n              <div className=\"Answerlike\">\n                {likes.map((like, index) => {\n                  return (\n                    <React.Fragment key={like + index}>\n                      <div\n                        className=\"like mylike\"\n                        rect={transition === like ? \"yes \" : \"no\"}\n                        style={{\n                          transform: ` ${\n                            transition === like ? \"translateY(-30px) \" : \"\"\n                          }`,\n                          opacity: ` ${transition === like ? \"0\" : \"1\"}`,\n                        }}\n                      >\n                        <img\n                          className=\"imgquitlike\"\n                          src={svgquit}\n                          alt=\"quit\"\n                          onClick={() => {\n                            removelikehandle(like);\n                          }}\n                        />\n                        <p>{like}</p>\n                        {index === likes.length - 1 &&\n                          likes.length < 3 &&\n                          !adding && (\n                            <div className=\"crox\" onClick={addhandler}>\n                              <div className=\"croxsp\" />\n                              <div className=\"croxsp\" />\n                            </div>\n                          )}\n                      </div>\n                    </React.Fragment>\n                  );\n                })}\n                {adding && (\n                  <React.Fragment>\n                    <div className={\"adding\"}>\n                      <input\n                        style={{ width: \"150px\" }}\n                        value={myval}\n                        onChange={changevalhandler}\n                        initialvalid\n                      />\n                      <div className=\"validate\" onClick={validateHandle}>\n                        <div className=\"croxsp\" />\n                        <div className=\"croxsp\" />\n                      </div>\n                    </div>\n                  </React.Fragment>\n                )}\n                {likes.length === 0 && !adding && (\n                  <div className=\"validate\" onClick={addhandler}>\n                    <div className=\"croxsp\" />\n                    <div className=\"croxsp\" />\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n          {!isLoginMode && (\n            <div className=\"form-control\">\n              <label>Status</label>\n              <div className=\"Answerstatu\">\n                <div\n                  className={`choice${\n                    status === \"public\" ? \"focus\" : \"unfocus\"\n                  }`}\n                  onClick={() => changeStatusHandler(\"public\")}\n                >\n                  <p>Public</p>\n                </div>\n                <div\n                  className={`choice${\n                    status === \"private\" ? \"focus\" : \"unfocus\"\n                  }`}\n                  onClick={() => changeStatusHandler(\"private\")}\n                >\n                  <p>Private</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <Button\n            type=\"submit\"\n            //disabled={!authState.isValid}\n            height=\"56px\"\n            text={\n              !isLoginMode\n                ? !props.change\n                  ? \"Signup\"\n                  : \"Apply Change\"\n                : \"Login\"\n            }\n            fontsize=\"30px\"\n            borderradius=\"22px\"\n            width=\"100%\"\n            topmargin={`${isLoginMode ? \"50px\" : \"\"}`}\n            orange\n          />\n        </form>\n        {!props.change && (\n          <Button\n            onClick={switchModeHandler}\n            height=\"39px\"\n            text={`Switch to ${isLoginMode ? \"Signup\" : \"Login\"}`}\n            fontsize=\"15px\"\n            borderradius=\"22px\"\n          />\n        )}\n        {errorText && (\n          <div className=\"errorText\">\n            <p>{errorText}</p>\n          </div>\n        )}\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n","/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Demand/NewDemand.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Nav/MainNav.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Public/AllUsers.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Public/Profil.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Public/NoRight.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Private/Conv.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/User/Private/userMessages.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Hooks/http-hook.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Hooks/form-hook.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Modal.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/ErrorModal.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Waitings.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Conv/OneConv.js",[],["130","131"],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Input.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/util/validators.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Avatar.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Backdrop.js",[],["132","133"],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/IconSvg.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Button.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Components/Shared/Confimationmodal.js",[],"/Users/louislombard/Documents/Project-Web Perso/GatsunProject/GatsunDev/gatsunweb/src/Pages/Admin/Admin.js",["134","135","136","137","138"],"import React, { useEffect, useContext, useState } from \"react\";\n\nimport { useHttpClient } from \"../../Hooks/http-hook\";\nimport { AuthContext } from \"../../Context/auth-context\";\nimport Button from \"../../Components/Shared/Button\";\nimport Modal from \"../../Components/Shared/Modal\";\nimport Confimationmodal from \"../../Components/Shared/Confimationmodal\";\n\nimport developsvg from \"../../File/svg/develop.svg\";\n\nimport \"./Admin.css\";\nimport Errormodal from \"../../Components/Shared/ErrorModal\";\nimport NewDemand from \"../Demand/NewDemand\";\n\nconst Admin = () => {\n  //data\n  const [alldemand, setalldemand] = useState([]);\n  const [prevalldemand, setprevalldemand] = useState([]);\n\n  const [alldemandpaiment, setalldemandpaiement] = useState([]);\n  const [prevalldemandpaiment, setprevalldemandpaiment] = useState([]);\n  const [alldemandkeys, setalldemandkeys] = useState([]);\n  const [developmode, setdevelopmode] = useState(false);\n  const [developmodepaiment, setdevelopmodepeiement] = useState(false);\n\n  const [confirmationmode, setconfirmationmode] = useState(false);\n  const [newdemandmode, setnewdemandemode] = useState(false);\n\n  const [focus, setfocus] = useState({});\n  const [focusmode, setfocusmode] = useState(false);\n\n  const [success, setsuccess] = useState();\n  const [message, setmessage] = useState(\"\");\n\n  const [reload, setrelaos] = useState(false);\n\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n\n  const quitfocusHandler = (e) => {\n    setfocusmode(false);\n  };\n  //JS function to manipule date\n  const DatetoStringMinemethod = (date) => {\n    return (\n      (date.getDate() > 9 ? date.getDate() : \"0\" + date.getDate()) +\n      \".\" +\n      (date.getMonth() > 8\n        ? date.getMonth() + 1\n        : \"0\" + (date.getMonth() + 1)) +\n      \".\" +\n      date.getFullYear()\n    );\n  };\n  useEffect(() => {\n    const sendreq = async () => {\n      try {\n        const response = await sendRequest(\n          `${process.env.REACT_APP_BACKENDURL}/api/demand/all`,\n          \"GET\",\n          null,\n          { Authorization: \"bearer \" + auth.token }\n        );\n        setalldemand(response.alldemand);\n        setprevalldemand(response.alldemand.slice(0, 2));\n      } catch (err) {}\n    };\n    sendreq();\n  }, [auth, sendRequest, reload]);\n  useEffect(() => {\n    const sendreq = async () => {\n      try {\n        const response = await sendRequest(\n          `${process.env.REACT_APP_BACKENDURL}/api/demand/allkeys`,\n          \"GET\",\n          null,\n          { Authorization: \"bearer \" + auth.token }\n        );\n        setalldemandkeys(response.alldemand);\n      } catch (err) {}\n    };\n    sendreq();\n  }, [auth, sendRequest, reload]);\n  useEffect(() => {\n    const sendreq = async () => {\n      try {\n        const response = await sendRequest(\n          `${process.env.REACT_APP_BACKENDURL}/api/demand/allpayment`,\n          \"GET\",\n          null,\n          { Authorization: \"bearer \" + auth.token }\n        );\n        setalldemandpaiement(response.alldemand);\n        setprevalldemandpaiment(response.alldemand.slice(0, 2));\n      } catch (err) {}\n    };\n    sendreq();\n  }, [auth, sendRequest, reload]);\n\n  const developmodehandler = () => {\n    setdevelopmode((p) => !p);\n  };\n\n  const focusmodehandler = (e, mode) => {\n    setfocusmode(mode);\n    setfocus(e);\n  };\n  const responsehandle = (e) => {\n    setsuccess(e);\n    setconfirmationmode(true);\n  };\n  const modeconfhandler = (e) => {\n    setconfirmationmode((p) => !p);\n  };\n  const developmodepaiementhandler = (e) => {\n    setdevelopmodepeiement((p) => !p);\n  };\n\n  const hndlesubmit = async (e) => {\n    console.log(\"dede\");\n    if (!success && message !== \"\" && focusmode == \"reservationenattente\") {\n      const tosend = {\n        demand: e._id,\n        result: success,\n        message: message,\n        date: new Date(),\n      };\n\n      try {\n        const response = await sendRequest(\n          `${process.env.REACT_APP_BACKENDURL}/api/demand/`,\n          \"PATCH\",\n          JSON.stringify(tosend),\n          {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + auth.token,\n          }\n        );\n\n        if (response.message === \"Success\") {\n          setconfirmationmode(false);\n          setfocusmode(false);\n          setdevelopmode(false);\n          setrelaos((p) => !p);\n          setmessage(\"\");\n        }\n      } catch (err) {}\n    } else if (success && focusmode == \"reservationenattente\") {\n      const tosend = {\n        demand: e._id,\n        message: \"ras\",\n        result: success,\n        date: new Date(),\n      };\n\n      try {\n        const response = await sendRequest(\n          `${process.env.REACT_APP_BACKENDURL}/api/demand/`,\n          \"PATCH\",\n          JSON.stringify(tosend),\n          {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + auth.token,\n          }\n        );\n        if (response.message === \"Success\") {\n          setconfirmationmode(false);\n          setdevelopmode(false);\n          setfocusmode(false);\n          setrelaos((p) => !p);\n          setmessage(\"\");\n        }\n      } catch (err) {}\n    } else if (focusmode === \"paiment\") {\n      try {\n        const tosend = {\n          demand: e._id,\n        };\n        const response = await sendRequest(\n          `${process.env.REACT_APP_BACKENDURL}/api/demand/validate`,\n          \"PATCH\",\n          JSON.stringify(tosend),\n          {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + auth.token,\n          }\n        );\n        if (response.message === \"Success\") {\n          setconfirmationmode(false);\n          setdevelopmode(false);\n          setfocusmode(false);\n          setrelaos((p) => !p);\n          setmessage(\"\");\n        }\n      } catch (err) {}\n    } else if (focusmode == \"keys\") {\n      try {\n        console.log(\"dd\");\n        const tosend = {\n          demand: e._id,\n          result: success,\n        };\n        const response = await sendRequest(\n          `${process.env.REACT_APP_BACKENDURL}/api/demand/validatekeys`,\n          \"PATCH\",\n          JSON.stringify(tosend),\n          {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + auth.token,\n          }\n        );\n        if (response.message === \"Success\") {\n          setconfirmationmode(false);\n          setdevelopmode(false);\n          setfocusmode(false);\n          setrelaos((p) => !p);\n          setmessage(\"\");\n        }\n      } catch (err) {}\n    }\n  };\n  const changemessagehandler = (e) => {\n    setmessage(e.target.value);\n  };\n  const newdemandHandler = () => {\n    setnewdemandemode((p) => !p);\n  };\n  const sendverifypayment = async (e) => {\n    try {\n      const response = await sendRequest(\n        `${process.env.REACT_APP_BACKENDURL}/api/helloasso/`,\n        \"GET\",\n        null,\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      console.log(response);\n    } catch (err) {}\n  };\n  return (\n    <div className=\"adminPage\">\n      <Errormodal\n        error={error}\n        onClear={clearError}\n        onClearAction={clearError}\n        action=\"Go Home\"\n      ></Errormodal>\n      <Confimationmodal\n        type=\"Other\"\n        title={\"Warning\"}\n        text={\n          success && focusmode == \"reservationenattente\"\n            ? \"Vous êtes sur le point de valider une demande. Êtes vous sur de pouvoir l'assurer?\"\n            : focusmode === \"paiment\"\n            ? \"Vous êtes sur le point de confirmer le paiement d'un membre. En êtes vous sur ? \"\n            : focusmode === \"keys\" && success\n            ? \"Vous êtes sur le point de confirmer que les clefs ont bien étées données à la personne adéquate. En êtes vous sur ? \"\n            : \"Vous êtes sur le point de refuser une demande. En êtes vous sur ?\"\n        }\n        onCancel={modeconfhandler}\n        onClick={() => hndlesubmit(focus)}\n        show={confirmationmode}\n        isLoading={isLoading}\n        disabled={\n          focusmode !== \"keys\" &&\n          focusmode !== \"paiment\" &&\n          !success &&\n          message === \"\"\n        }\n        buttontext={\n          success && focusmode == \"reservationenattente\"\n            ? \"Valider la demande\"\n            : focusmode === \"paiment\"\n            ? \"Je confirme son paiement\"\n            : focusmode === \"keys\" && success\n            ? \"Je lui ai donnée les clefs\"\n            : \"Refuser la demande\"\n        }\n      >\n        {focusmode !== \"keys\" && focusmode !== \"paiment\" && !success && (\n          <div className=\"messa\">\n            <h2>Message (obligatoire)</h2>\n            <textarea\n              type=\"textarea\"\n              className=\"demandinput\"\n              value={message}\n              rows=\"9\"\n              onChange={changemessagehandler}\n              style={{ backgroundColor: message === \"\" ? \"#ffd1d1\" : \"\" }}\n            />\n          </div>\n        )}\n      </Confimationmodal>\n      <Modal\n        show={!!focusmode}\n        className=\"focuondemand\"\n        onCancel={quitfocusHandler}\n        height={\"auto\"}\n        overflow=\"scroll\"\n      >\n        <div className=\"demandId\">\n          <h1 style={{ fontSize: \"20px\" }}>Demand Id</h1>\n          <p>{focus._id}</p>\n        </div>\n        <div className=\"nomprenom\">\n          <h1 style={{ fontSize: \"20px\" }}>Demandeur</h1>\n          <p>{focus.ownerdenomination}</p>\n        </div>\n        <div className=\"datedossier\">\n          <h1 style={{ fontSize: \"20px\" }}>Date de dossier</h1>\n          <p>{DatetoStringMinemethod(new Date(focus.askingDate))}</p>\n        </div>\n        <div className=\"datedébut\">\n          <h1 style={{ fontSize: \"20px\" }}>Date de la réservation</h1>\n          <p>{`Le ${DatetoStringMinemethod(\n            new Date(focus.askedDatebeg)\n          )} à ${new Date(focus.askedDatebeg).getHours()}H`}</p>\n        </div>\n        <div className=\"Heure\">\n          <h1 style={{ fontSize: \"20px\" }}>Nombre d'heure</h1>\n          <p>\n            {(new Date(focus.askedDateend).getTime() -\n              new Date(focus.askedDatebeg).getTime()) /\n              3600000}\n          </p>\n        </div>\n        <div className=\"status\">\n          <h1 style={{ fontSize: \"20px\" }}>Status</h1>\n          <p\n            style={{\n              color:\n                focus.status === \"Waiting for validation\" ? \"orange\" : \"black\",\n            }}\n          >\n            {focus.status}\n          </p>\n        </div>\n        <div className=\"status\">\n          <h1 style={{ fontSize: \"20px\" }}>Type</h1>\n          <p>{focus.type}</p>\n        </div>\n\n        <div className=\"demandId\">\n          <h1 style={{ fontSize: \"20px\" }}>Mode de paiement</h1>\n          <p>{focus.paymentmethod}</p>\n        </div>\n        <div className=\"demandId\">\n          <h1 style={{ fontSize: \"20px\" }}>Message</h1>\n          <p>{focus.body}</p>\n        </div>\n\n        <div className=\"actionstodo\">\n          {focusmode === \"reservationenattente\" && (\n            <React.Fragment>\n              <Button\n                height=\"50px\"\n                width=\"40%\"\n                borderradius=\"38px\"\n                maxWidth=\"90vw\"\n                onClick={() => responsehandle(false)}\n                bottom=\"10px\"\n                topmargin=\"30px\"\n              >\n                <h4 style={{ fontSize: \"20px\", margin: \"0\" }}>Refuser</h4>\n              </Button>\n              <Button\n                height=\"50px\"\n                orange\n                width=\"40%\"\n                borderradius=\"38px\"\n                maxWidth=\"90vw\"\n                onClick={() => responsehandle(true)}\n                bottom=\"10px\"\n                topmargin=\"30px\"\n              >\n                <h4 style={{ fontSize: \"20px\", margin: \"0\" }}>Valider</h4>\n              </Button>\n            </React.Fragment>\n          )}\n          {focusmode === \"paiment\" && (\n            <React.Fragment>\n              <Button\n                height=\"50px\"\n                width=\"80%\"\n                orange\n                borderradius=\"38px\"\n                maxWidth=\"90vw\"\n                onClick={() => responsehandle(false)}\n                bottom=\"10px\"\n                topmargin=\"30px\"\n              >\n                <h4 style={{ fontSize: \"20px\", margin: \"0\" }}>\n                  Valider paiement\n                </h4>\n              </Button>\n            </React.Fragment>\n          )}\n          {focusmode === \"keys\" && (\n            <React.Fragment>\n              <Button\n                height=\"50px\"\n                width=\"80%\"\n                orange\n                borderradius=\"38px\"\n                maxWidth=\"90vw\"\n                onClick={() => responsehandle(true)}\n                bottom=\"10px\"\n                topmargin=\"30px\"\n              >\n                <h4 style={{ fontSize: \"20px\", margin: \"0\" }}>Clefs données</h4>\n              </Button>\n              <Button\n                height=\"50px\"\n                width=\"80%\"\n                orange\n                borderradius=\"38px\"\n                maxWidth=\"90vw\"\n                onClick={() => responsehandle(false)}\n                bottom=\"10px\"\n                topmargin=\"30px\"\n              >\n                <h4 style={{ fontSize: \"20px\", margin: \"0\" }}>Refus</h4>\n              </Button>\n            </React.Fragment>\n          )}\n        </div>\n      </Modal>\n      <div\n        className=\"reservationenattente\"\n        style={{ height: developmode ? \"70vh\" : \"280px\" }}\n      >\n        <h1>Reservations en attente</h1>\n        <div\n          className=\"buttoncontainer\"\n          style={{\n            overflowY: developmode ? \"scroll\" : \"visible\",\n            height: developmode ? \"80%\" : \"180px\",\n          }}\n        >\n          {!developmode &&\n            prevalldemand.map((demand) => {\n              return (\n                <React.Fragment key={demand._id}>\n                  <Button\n                    key={demand._id}\n                    height=\"55px\"\n                    orange\n                    borderradius=\"38px\"\n                    maxWidth=\"90vw\"\n                    onClick={() =>\n                      focusmodehandler(demand, \"reservationenattente\")\n                    }\n                  >\n                    <h2>{demand.ownerdenomination}</h2>\n                  </Button>\n                </React.Fragment>\n              );\n            })}\n          {developmode &&\n            alldemand.map((demand) => {\n              return (\n                <React.Fragment key={demand._id}>\n                  <Button\n                    height=\"55px\"\n                    orange\n                    borderradius=\"38px\"\n                    maxWidth=\"90vw\"\n                    onClick={() =>\n                      focusmodehandler(demand, \"reservationenattente\")\n                    }\n                  >\n                    <h2>{demand.ownerdenomination}</h2>\n                  </Button>\n                </React.Fragment>\n              );\n            })}\n        </div>\n        <img\n          style={{\n            width: \"43px\",\n            position: \"absolute\",\n            bottom: \"5px\",\n            left: \"45%\",\n          }}\n          src={developsvg}\n          alt=\"develop\"\n          onClick={developmodehandler}\n        />\n      </div>\n\n      <div className=\"Inventaire\">\n        <h1>Inventaire</h1>\n        <p>Pas encore disponible</p>\n      </div>\n      <NewDemand public show={newdemandmode} onCancel={newdemandHandler} />\n      <div className=\"synchronisationHelloAsso\">\n        <div className=\"synchroAdhesion\">\n          <Button\n            height=\"55px\"\n            orange\n            borderradius=\"38px\"\n            width=\"40%\"\n            marginbottom=\"20px\"\n            maxWidth=\"90vw\"\n            onClick={sendverifypayment}\n          >\n            <h4>Check Payment</h4>\n          </Button>\n          <Button\n            height=\"55px\"\n            orange\n            borderradius=\"38px\"\n            width=\"40%\"\n            marginbottom=\"20px\"\n            maxWidth=\"90vw\"\n            onClick={newdemandHandler}\n          >\n            <h4>Public session</h4>\n          </Button>\n        </div>\n        <div className=\"synchoreservation\"></div>\n      </div>\n      <div\n        className=\"paiementenattente\"\n        style={{ height: developmodepaiment ? \"70vh\" : \"280px\" }}\n      >\n        <h1>Paiements en attente</h1>\n        <div\n          className=\"buttoncontainer\"\n          style={{\n            overflowY: developmodepaiment ? \"scroll\" : \"visible\",\n            height: developmodepaiment ? \"80%\" : \"180px\",\n          }}\n        >\n          {!developmodepaiment &&\n            prevalldemandpaiment.map((demand) => {\n              return (\n                <React.Fragment key={demand._id}>\n                  <Button\n                    key={demand._id}\n                    height=\"55px\"\n                    orange\n                    borderradius=\"38px\"\n                    maxWidth=\"90vw\"\n                    onClick={() => focusmodehandler(demand, \"paiment\")}\n                  >\n                    <h2>{demand.ownerdenomination}</h2>\n                  </Button>\n                </React.Fragment>\n              );\n            })}\n          {developmodepaiment &&\n            alldemandpaiment.map((demand) => {\n              return (\n                <React.Fragment key={demand._id}>\n                  <Button\n                    key={demand._id}\n                    height=\"55px\"\n                    orange\n                    borderradius=\"38px\"\n                    maxWidth=\"90vw\"\n                    onClick={() => focusmodehandler(demand, \"paiment\")}\n                  >\n                    <h2>{demand.ownerdenomination}</h2>\n                  </Button>\n                </React.Fragment>\n              );\n            })}\n        </div>\n        <img\n          style={{\n            width: \"43px\",\n            position: \"absolute\",\n            bottom: \"5px\",\n            left: \"45%\",\n          }}\n          src={developsvg}\n          alt=\"develop\"\n          onClick={developmodepaiementhandler}\n        />\n      </div>\n      <div\n        className=\"paiementenattente\"\n        style={{ height: developmodepaiment ? \"70vh\" : \"\" }}\n      >\n        <h1>Clefs en attente</h1>\n        <div\n          className=\"buttoncontainer\"\n          style={{\n            overflowY: developmodepaiment ? \"scroll\" : \"visible\",\n            height: developmodepaiment ? \"80%\" : \"\",\n          }}\n        >\n          {alldemandkeys.map((demand) => {\n            return (\n              <React.Fragment key={demand._id}>\n                <Button\n                  key={demand._id}\n                  height=\"55px\"\n                  orange\n                  borderradius=\"38px\"\n                  maxWidth=\"90vw\"\n                  onClick={() => focusmodehandler(demand, \"keys\")}\n                >\n                  <h2>{demand.ownerdenomination}</h2>\n                </Button>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Admin;\n",{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":18,"column":8,"nodeType":"145","messageId":"146","endLine":18,"endColumn":12},{"ruleId":"143","severity":1,"message":"147","line":27,"column":11,"nodeType":"145","messageId":"146","endLine":27,"endColumn":20},{"ruleId":"143","severity":1,"message":"148","line":27,"column":22,"nodeType":"145","messageId":"146","endLine":27,"endColumn":27},{"ruleId":"143","severity":1,"message":"149","line":27,"column":42,"nodeType":"145","messageId":"146","endLine":27,"endColumn":52},{"ruleId":"143","severity":1,"message":"147","line":21,"column":11,"nodeType":"145","messageId":"146","endLine":21,"endColumn":20},{"ruleId":"143","severity":1,"message":"148","line":21,"column":22,"nodeType":"145","messageId":"146","endLine":21,"endColumn":27},{"ruleId":"143","severity":1,"message":"149","line":21,"column":42,"nodeType":"145","messageId":"146","endLine":21,"endColumn":52},{"ruleId":"139","replacedBy":"150"},{"ruleId":"141","replacedBy":"151"},{"ruleId":"139","replacedBy":"152"},{"ruleId":"141","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":121,"column":49,"nodeType":"156","messageId":"157","endLine":121,"endColumn":51},{"ruleId":"154","severity":1,"message":"155","line":148,"column":37,"nodeType":"156","messageId":"157","endLine":148,"endColumn":39},{"ruleId":"154","severity":1,"message":"155","line":196,"column":26,"nodeType":"156","messageId":"157","endLine":196,"endColumn":28},{"ruleId":"154","severity":1,"message":"155","line":254,"column":32,"nodeType":"156","messageId":"157","endLine":254,"endColumn":34},{"ruleId":"154","severity":1,"message":"155","line":273,"column":32,"nodeType":"156","messageId":"157","endLine":273,"endColumn":34},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'clearError' is assigned a value but never used.",["158"],["159"],["158"],["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]