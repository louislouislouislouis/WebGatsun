[{"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/index.js":"1","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/App.js":"2","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Shared/Waitings.js":"3","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Hooks/auth-hooks.js":"4","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/context/auth-context.js":"5","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Nav/MainNav.js":"6","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Shared/Input.js":"7","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Shared/Avatar.js":"8","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Hooks/form-hook.js":"9","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/util/validators.js":"10","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/Auth/Auth.js":"11","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Private/Conv.js":"12","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/Home/Home.js":"13","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Public/NoRight.js":"14","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Public/Profil.js":"15","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Public/AllUsers.js":"16","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Private/userMessages.js":"17","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Context/auth-context.js":"18","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Conv/OneConv.js":"19","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Hooks/http-hook.js":"20"},{"size":381,"mtime":1612127399040,"results":"21","hashOfConfig":"22"},{"size":2218,"mtime":1614446906825,"results":"23","hashOfConfig":"22"},{"size":498,"mtime":1612182225931,"results":"24","hashOfConfig":"22"},{"size":1683,"mtime":1613984060858,"results":"25","hashOfConfig":"22"},{"size":178,"mtime":1614115623920,"results":"26","hashOfConfig":"22"},{"size":860,"mtime":1614117120010,"results":"27","hashOfConfig":"22"},{"size":2099,"mtime":1614458173311,"results":"28","hashOfConfig":"22"},{"size":315,"mtime":1612202099986,"results":"29","hashOfConfig":"22"},{"size":1544,"mtime":1614117766556,"results":"30","hashOfConfig":"22"},{"size":1674,"mtime":1612344464776,"results":"31","hashOfConfig":"22"},{"size":5213,"mtime":1614363219549,"results":"32","hashOfConfig":"22"},{"size":2693,"mtime":1614367100595,"results":"33","hashOfConfig":"22"},{"size":102,"mtime":1614115162151,"results":"34","hashOfConfig":"22"},{"size":197,"mtime":1614116239157,"results":"35","hashOfConfig":"22"},{"size":8404,"mtime":1614459698199,"results":"36","hashOfConfig":"22"},{"size":1652,"mtime":1614375695139,"results":"37","hashOfConfig":"22"},{"size":5456,"mtime":1614453215478,"results":"38","hashOfConfig":"22"},{"size":178,"mtime":1614115623920,"results":"39","hashOfConfig":"22"},{"size":394,"mtime":1614120056822,"results":"40","hashOfConfig":"22"},{"size":1340,"mtime":1614448345061,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1iwl5ea",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/index.js",[],["87","88"],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/App.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Shared/Waitings.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Hooks/auth-hooks.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/context/auth-context.js",[],["89","90"],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Nav/MainNav.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Shared/Input.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Shared/Avatar.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Hooks/form-hook.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/util/validators.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/Auth/Auth.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Private/Conv.js",["91","92","93"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { NavLink, useParams } from \"react-router-dom\";\n\nimport OneConv from \"../../../Components/Conv/OneConv\";\nimport { useHttpClient } from \"../../../Hooks/http-hook\";\nimport { AuthContext } from \"../../../Context/auth-context\";\n\nimport \"./Conv.css\";\nconst Conv = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n\n  const userId = useParams().userId;\n\n  const [myconv, setmyconv] = useState();\n  const [userimg, setuserimg] = useState([]);\n  useEffect(() => {\n    const sendReq = async () => {\n      try {\n        const convsresponse = await sendRequest(\n          `http://localhost:5000/api/conv/fbuser/${userId}`,\n          \"GET\",\n          null,\n          { Authorization: \"Bearer \" + auth.token }\n        );\n\n        if (convsresponse) {\n          setmyconv(convsresponse);\n        }\n        getimage(convsresponse);\n      } catch (err) {}\n    };\n    sendReq();\n  }, [userId, auth.token, sendRequest]);\n\n  const getimage = async (convs) => {\n    let arrayimg = [];\n    for (const conv of convs) {\n      const parts = conv.participants;\n      let mesparticipantsimg = [];\n      for (const part of parts) {\n        try {\n          const response = await fetch(\n            `http://localhost:5000/api/user/${part}`\n          );\n          const user = await response.json();\n          mesparticipantsimg.push(user.img);\n        } catch (err) {}\n        //console.log(mesparticipantsimg)\n      }\n      arrayimg.push({ conv: conv.id, partimg: mesparticipantsimg });\n    }\n    //console.log(arrayimg)\n    setuserimg(arrayimg);\n  };\n\n  return (\n    <React.Fragment>\n      {myconv && myconv.length !== 0 && (\n        <div className=\"List\">\n          {myconv.map((conv) => {\n            let lol = userimg.find((convp) => convp.conv === conv.id);\n            if (lol) {\n              return (\n                <NavLink\n                  to={`/${userId}/conv/${conv.id}`}\n                  key={userId + conv.id}\n                >\n                  <OneConv\n                    /* with={conv.participants.filter((part) => part !== userId)} */\n                    with={lol.partimg}\n                  />\n                </NavLink>\n              );\n            } else {\n              return <div key={conv.id} />;\n            }\n          })}\n          <NavLink to={`/user/allusers`}>\"Start a new conversation\"</NavLink>\n        </div>\n      )}\n      {myconv && myconv.length === 0 && (\n        <NavLink to={`/user/allusers`}>\n          You don't haaave any conversation yet. Start one?\n        </NavLink>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Conv;\n","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/Home/Home.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Public/NoRight.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Public/Profil.js",["94","95"],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Public/AllUsers.js",["96","97","98"],"import React, { useEffect, useState, useContext } from \"react\";\n\nimport { useHttpClient } from \"../../../Hooks/http-hook\";\nimport { AuthContext } from \"../../../Context/auth-context\";\nimport Avatar from \"../../../Components/Shared/Avatar\";\n\nconst Users = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [allusers, setallusers] = useState();\n  const auth = useContext(AuthContext);\n  useEffect(() => {\n    const sendReq = async () => {\n      try {\n        const convsresponse = await sendRequest(\n          `http://localhost:5000/api/user/alluser`\n        );\n        if (convsresponse) {\n          setallusers(convsresponse);\n        }\n      } catch (err) {}\n    };\n    sendReq();\n  }, [sendRequest]);\n  const handlecreateconv = async (e) => {\n    const formData = new FormData();\n    formData.append(\"part1\", auth.userId);\n    formData.append(\"part2\", e);\n\n    try {\n      await sendRequest(\n        `http://localhost:5000/api/conv`,\n        \"POST\",\n        JSON.stringify({\n          part1: auth.userId,\n          part2: e,\n        }),\n        {\n          Authorization: \"Bearer \" + auth.token,\n          \"Content-Type\": \"application/json\",\n        }\n      );\n    } catch (err) {}\n  };\n  return (\n    <React.Fragment>\n      {allusers &&\n        allusers.map((usr) => {\n          return (\n            <div key={usr.id} onClick={() => handlecreateconv(usr.id)}>\n              <div className=\"name\">{usr.id}</div>\n              <Avatar image={usr.img} alt={usr.id} width=\"100px\"></Avatar>\n            </div>\n          );\n        })}\n      <div>Pas de ll</div>\n    </React.Fragment>\n  );\n};\n\nexport default Users;\n","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Pages/User/Private/userMessages.js",["99","100","101","102"],"import React, {\n  useEffect,\n  useState,\n  useRef,\n  useCallback,\n  useContext,\n} from \"react\";\nimport { NavLink, useParams } from \"react-router-dom\";\n\nimport Avatar from \"../../../Components/Shared/Avatar\";\nimport Input from \"../../../Components/Shared/Input\";\nimport { useForm } from \"../../../Hooks/form-hook\";\nimport { VALIDATOR_REQUIRE } from \"../../../util/validators\";\nimport { AuthContext } from \"../../../Context/auth-context\";\nimport { useHttpClient } from \"../../../Hooks/http-hook\";\n\nimport backimg from \"../../../File/Icon/back.png\";\n\nimport \"./userMessages.css\";\n\nconst UserMessages = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const msgRef = useRef();\n  const auth = useContext(AuthContext);\n  const userId = useParams().userId;\n  const [myconv, setrconv] = useState();\n  const convId = useParams().convId;\n  const evtSrclive = useRef(null);\n\n  //CREER LA SOURCEEVENT SHARABLE\n  const listenEvt = useCallback(() => {\n    if (!evtSrclive.current) {\n      evtSrclive.current = new EventSource(\n        `http://localhost:5000/api/live/${userId}`\n      );\n    }\n  }, [userId]);\n\n  const [MsgState, inputhandler, setformData] = useForm(\n    {\n      body: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  //FONCTION A UTILISER POUR DEMANDER UN RECHARGEMENT DES DONNES SANS PAGE\n\n  const lasendReq = useCallback(() => {\n    const vsendReq = async () => {\n      try {\n        const response = await sendRequest(\n          `http://localhost:5000/api/conv/${convId}`,\n          \"GET\",\n          null,\n          { Authorization: \"bearer \" + auth.token }\n        );\n        setrconv(response);\n      } catch (err) {}\n    };\n    vsendReq();\n\n    msgRef.current.scrollTop = msgRef.current.scrollHeight + 100;\n  }, [convId, sendRequest, auth.token]);\n\n  const sendlivreq = useCallback(() => {\n    const vsendReq = async () => {\n      try {\n        const response = await sendRequest(\n          `http://localhost:5000/api/live/${convId}/newmsg`\n        );\n      } catch (err) {}\n    };\n    vsendReq();\n  }, [convId, sendRequest]);\n\n  //SE CONNECTER AU LIVE ET ETRE A L'AFFUT DES MESSAGE\n  useEffect(() => {\n    listenEvt();\n    evtSrclive.current.addEventListener(\"newmsg\", (event) => {\n      console.log(\"Message\", event.data);\n      if (event.data === convId) {\n        lasendReq();\n      }\n    });\n    return () => evtSrclive.current.close();\n  }, [convId, lasendReq, listenEvt]);\n\n  //RECUPERER CONV AU CHARGMEENT DE LA PAGE\n\n  useEffect(() => {\n    const sendReq = async () => {\n      try {\n        const response = await sendRequest(\n          `http://localhost:5000/api/conv/${convId}`,\n          \"GET\",\n          null,\n          { Authorization: \"bearer \" + auth.token }\n        );\n        setrconv(response);\n      } catch (err) {}\n    };\n    sendReq();\n  }, [convId, sendRequest, auth.token]);\n\n  //POUR AVOIR UN ECRAN EN BAS AU RECHARGEMENT ET A L'ARRIVEE SUR LA PAGE\n\n  useEffect(() => {\n    if (myconv) {\n      msgRef.current.scrollTop = msgRef.current.scrollHeight;\n    }\n  }, [myconv]);\n\n  const [onclear, setonclear] = useState(false);\n\n  const userUpdateSubmitHandler = async (e) => {\n    e.preventDefault();\n    console.log(convId);\n\n    await sendRequest(\n      `http://localhost:5000/api/conv/${convId}/msg`,\n      \"POST\",\n      JSON.stringify({\n        value: MsgState.inputs.body.value,\n      }),\n      {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + auth.token,\n      }\n    );\n    lasendReq();\n    sendlivreq();\n    setformData(\n      {\n        body: {\n          value: \"\",\n          isValid: false,\n        },\n      },\n      false\n    );\n    setonclear(true);\n    setTimeout(() => setonclear(false), 500);\n  };\n  return (\n    <div className=\"User__message__page\">\n      {myconv && (\n        <div className=\"user_conv\">\n          <div className=\"user_conv_info\">\n            {myconv.img.map((part) => {\n              return (\n                <div key={part} className=\"participants\">\n                  <Avatar image={part} alt={part} width=\"50px\"></Avatar>\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"message\" ref={msgRef}>\n            {myconv.messages.map((index) => {\n              return (\n                <div\n                  className={`${userId === index.from ? \"my\" : \"other\"}msg`}\n                  key={index.date + index.from}\n                >\n                  <div\n                    className={`${\n                      userId === index.from ? \"my\" : \"other\"\n                    }msg__content`}\n                  >\n                    <p>{index.body}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          <form className=\"send\" onSubmit={userUpdateSubmitHandler}>\n            {MsgState.inputs.body && (\n              <Input\n                id=\"body\"\n                element=\"input\"\n                type=\"text\"\n                validators={[VALIDATOR_REQUIRE()]}\n                onInput={inputhandler}\n                initialvalue=\"\"\n                onclear={onclear}\n              />\n            )}\n            <button type=\"submit\" disabled={!MsgState.isValid}>\n              Envoyer\n            </button>\n          </form>\n        </div>\n      )}\n      <NavLink to={`/${userId}/conv`}>\n        <img src={backimg} alt=\"retour\"></img>\n      </NavLink>\n    </div>\n  );\n};\n\nexport default UserMessages;\n","/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Context/auth-context.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Components/Conv/OneConv.js",[],"/Users/louislombard/Desktop/Site Gatsun/gatsunweb/src/Hooks/http-hook.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"103","replacedBy":"107"},{"ruleId":"105","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":10,"column":11,"nodeType":"111","messageId":"112","endLine":10,"endColumn":20},{"ruleId":"109","severity":1,"message":"113","line":10,"column":22,"nodeType":"111","messageId":"112","endLine":10,"endColumn":27},{"ruleId":"109","severity":1,"message":"114","line":10,"column":42,"nodeType":"111","messageId":"112","endLine":10,"endColumn":52},{"ruleId":"109","severity":1,"message":"113","line":22,"column":22,"nodeType":"111","messageId":"112","endLine":22,"endColumn":27},{"ruleId":"109","severity":1,"message":"114","line":22,"column":42,"nodeType":"111","messageId":"112","endLine":22,"endColumn":52},{"ruleId":"109","severity":1,"message":"110","line":8,"column":11,"nodeType":"111","messageId":"112","endLine":8,"endColumn":20},{"ruleId":"109","severity":1,"message":"113","line":8,"column":22,"nodeType":"111","messageId":"112","endLine":8,"endColumn":27},{"ruleId":"109","severity":1,"message":"114","line":8,"column":42,"nodeType":"111","messageId":"112","endLine":8,"endColumn":52},{"ruleId":"109","severity":1,"message":"110","line":22,"column":11,"nodeType":"111","messageId":"112","endLine":22,"endColumn":20},{"ruleId":"109","severity":1,"message":"113","line":22,"column":22,"nodeType":"111","messageId":"112","endLine":22,"endColumn":27},{"ruleId":"109","severity":1,"message":"114","line":22,"column":42,"nodeType":"111","messageId":"112","endLine":22,"endColumn":52},{"ruleId":"109","severity":1,"message":"115","line":72,"column":15,"nodeType":"111","messageId":"112","endLine":72,"endColumn":23},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],["116"],["117"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'clearError' is assigned a value but never used.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]