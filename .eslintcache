[{"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/index.js":"1","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/App.js":"2","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/userMessages.js":"3","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/User.js":"4","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/Myflow.js":"5","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/Conv.js":"6","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Nav/MainNav.js":"7","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/Waitings.js":"8","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/Input.js":"9","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/Avatar.js":"10","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/OneConv.js":"11","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Hooks/form-hook.js":"12","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/util/validators.js":"13","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Hooks/auth-hooks.js":"14","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/Auth.js":"15","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/context/auth-context.js":"16"},{"size":381,"mtime":1612690680828,"results":"17","hashOfConfig":"18"},{"size":1468,"mtime":1613828514950,"results":"19","hashOfConfig":"18"},{"size":7771,"mtime":1613418213520,"results":"20","hashOfConfig":"18"},{"size":104,"mtime":1612690680827,"results":"21","hashOfConfig":"18"},{"size":7364,"mtime":1613243276764,"results":"22","hashOfConfig":"18"},{"size":2017,"mtime":1613753034088,"results":"23","hashOfConfig":"18"},{"size":827,"mtime":1613838687674,"results":"24","hashOfConfig":"18"},{"size":498,"mtime":1612690680824,"results":"25","hashOfConfig":"18"},{"size":2022,"mtime":1613243276761,"results":"26","hashOfConfig":"18"},{"size":315,"mtime":1612690680823,"results":"27","hashOfConfig":"18"},{"size":466,"mtime":1613752781397,"results":"28","hashOfConfig":"18"},{"size":1572,"mtime":1613243276762,"results":"29","hashOfConfig":"18"},{"size":1674,"mtime":1612690680828,"results":"30","hashOfConfig":"18"},{"size":1683,"mtime":1613825674924,"results":"31","hashOfConfig":"18"},{"size":2002,"mtime":1613838914003,"results":"32","hashOfConfig":"18"},{"size":178,"mtime":1613825910527,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"yroblv",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/index.js",[],["71","72"],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/App.js",["73"],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/userMessages.js",["74","75","76","77","78","79","80"],"import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { NavLink, useParams } from \"react-router-dom\";\n\nimport Avatar from \"../Components/Shared/Avatar\";\nimport Input from \"../Components/Shared/Input\";\nimport { useForm } from \"../Hooks/form-hook\";\nimport { VALIDATOR_REQUIRE } from \"../util/validators\";\n\nimport backimg from \"../File/Icon/back.png\";\n\nimport \"./userMessages.css\";\nlet interval;\nconst UserMessages = () => {\n  const msgRef = useRef();\n  \n\n  const userId = useParams().userId;\n\n  const [participipants, setrUser] = useState([]);\n\n  const [myconv, setrconv] = useState();\n  const [getmsg, setgetmsg] = useState(false);\n  const convId = useParams().convId;\n\n  let source,eventSource;\n\n  useEffect(() => {\n    source=new EventSource(`http://localhost:5000/stream/hello`);\n    eventSource=new EventSource(`http://localhost:5000/stream/live/${convId}/${userId}`);\n    /* Ou via l'ajout d'un gestionnaire d'événement \"open\" */\n    source.addEventListener('open', () => console.log('connected'));\n    \n    source.addEventListener('CustomEvent', (event) => {\n      console.log(event.data)\n      lasendReq()\n    });\n    eventSource.addEventListener('count', event => {\n      console.log(`Il y a actuellement ${event.data} personne(s) connectée(s) sur le live`);\n    });\n    eventSource.addEventListener('message', event => {\n      console.log(event);\n      lasendReq()\n    });\n    \n    /* Soit via l'utilisation de la méthode \"onerror\" */\n\n    /* Ou via l'ajout d'un gestionnaire d'événement \"error\" */\n    source.addEventListener('error', event => {\n      console.log(event);\n      if (source.readyState === EventSource.CLOSED) {\n      /* Traitement en cas de perte de connexion définitive avec le serveur */\n      console.log(\"aiaiaia\");\n      }\n      if (source.readyState === EventSource.CONNECTING) {\n      /* En cas de perte de connexion temporaire avec le serveur */\n      console.log(\"ouloulou\");\n      }\n    });\n    source.onmessage = event => {\n      console.log(event.data);\n    };\n    /* Récupération des messages de type \"alert\" */\n    source.addEventListener('alert', event => {\n      console.log('Alert message', event.data);\n    });\n\n    /* Récupération des messages de type \"comment\" */\n    source.addEventListener('comment', event => {\n      console.log('Comment message', event.data);\n    });\n\n    /* Récupération des messages de type \"like\" */\n    source.addEventListener('like', event => {\n      console.log('Like message', event.data);\n    });\n    source.addEventListener('message', event => {\n      console.log('Message', event.data);\n    });\n  }, []);\n\n  const [MsgState, inputhandler, setformData] = useForm(\n    {\n      body: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const lasendReq = useCallback(() => {\n    const vsendReq = async () => {\n      try {\n        console.log(\"in\");\n        const response = await fetch(\n          `http://localhost:5000/api/conv/${convId}`\n        );\n\n        const responseData = await response.json();\n        //console.log(responseData.participants);\n        if (responseData !== myconv) {\n          setrconv(responseData);\n          setTimeout(\n            () =>\n              (msgRef.current.scrollTop = msgRef.current.scrollHeight + 200),\n            50\n          );\n        }\n      } catch (err) {}\n    };\n    vsendReq();\n  }, []);\n  useEffect(() => {\n    const sendReq = async () => {\n      console.log(\"err\");\n      try {\n        const response = await fetch(\n          `http://localhost:5000/api/conv/${convId}`\n        );\n\n        const responseData = await response.json();\n        console.log(responseData.participants);\n        setrconv(responseData);\n\n        //finPart(responseData.participants);\n        //console.log(responseData.participants[0]);\n        const response2 = await fetch(\n          `http://localhost:5000/api/user/${responseData.participants[0]}`\n        );\n        const responseData2 = await response2.json();\n        const img = responseData2.img;\n        setrUser((old) => [...old, img]);\n        console.log(img);\n\n        const response3 = await fetch(\n          `http://localhost:5000/api/user/${responseData.participants[1]}`\n        );\n        const responseData3 = await response3.json();\n        const img2 = responseData3.img;\n        setrUser((old) => [...old, img2]);\n        console.log(img);\n        if (getmsg === false) {\n          setgetmsg(true);\n        }\n      } catch (err) {}\n    };\n    sendReq();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"acha,ge\");\n    if (myconv) {\n      msgRef.current.scrollTop = msgRef.current.scrollHeight;\n    }\n  }, [getmsg]);\n\n  \n  /* useEffect(() => {\n    console.log(\"ineee\");\n    interval = setInterval(() => {\n      lasendReq();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []); */\n\n  //let myconv = DUMMY_CONV.find((conv) => conv.id === convId);\n\n  //console.log(DUMMY_CONV.messages);\n\n  const [onclear, setonclear] = useState(false);\n  //console.log(participipants);\n  const userUpdateSubmitHandler = async (e) => {\n    console.log(interval);\n    clearInterval(interval);\n    e.preventDefault();\n    //console.log(authState.inputs.name.value);\n    console.log(myconv);\n\n    const response = await fetch(\n      `http://localhost:5000/api/conv/${convId}/${userId}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          value: MsgState.inputs.body.value,\n        }),\n      }\n    );\n    lasendReq();\n    /* interval = setInterval(() => {\n      lasendReq();\n    }, 1000);  */\n    console.log(MsgState);\n    setformData(\n      {\n        body: {\n          value: \"\",\n          isValid: false,\n        },\n      },\n      false\n    );\n    console.log(MsgState);\n    setonclear(true);\n    setTimeout(() => setonclear(false), 500);\n    setTimeout(\n      () => (msgRef.current.scrollTop = msgRef.current.scrollHeight + 200),\n      50\n    );\n\n    //setConv((myconv) => myconv);\n  };\n \n   \n  \n  return (\n    <div className=\"User__message__page\">\n      {myconv && (\n        <div className=\"user_conv\">\n          {MsgState.inputs.body.value}\n          <div className=\"user_conv_info\">\n            {participipants.map((part) => {\n              return (\n                <div key={part} className=\"participants\">\n                  <Avatar image={part} alt={part} width=\"50px\"></Avatar>\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"message\" ref={msgRef}>\n            {myconv.messages.map((index) => {\n              return (\n                <div\n                  className={`${userId === index.from ? \"my\" : \"other\"}msg`}\n                  key={index.date + index.from}\n                >\n                  <div\n                    className={`${\n                      userId === index.from ? \"my\" : \"other\"\n                    }msg__content`}\n                  >\n                    <p>{index.body}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          <form className=\"send\" onSubmit={userUpdateSubmitHandler}>\n            {MsgState.inputs.body && (\n              <Input\n                id=\"body\"\n                element=\"input\"\n                type=\"text\"\n                validators={[VALIDATOR_REQUIRE()]}\n                onInput={inputhandler}\n                initialvalue=\"\"\n                onclear={onclear}\n              />\n            )}\n            <button type=\"submit\" disabled={!MsgState.isValid}>\n              Envoyer\n            </button>\n          </form>\n        </div>\n      )}\n      <NavLink to={`/${userId}/conv`}>\n        <img src={backimg}></img>\n      </NavLink>\n    </div>\n  );\n};\n\nexport default UserMessages;\n","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/User.js",[],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/Myflow.js",["81","82"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { NavLink, useParams } from \"react-router-dom\";\n\nimport { useForm } from \"../Hooks/form-hook\";\n\nimport { VALIDATOR_REQUIRE } from \"../util/validators\";\nimport Input from \"../Components/Shared/Input\";\nimport Avatar from \"../Components/Shared/Avatar\";\n\nimport \"./Myflow.css\";\n\nimport messageimg from \"../File/Icon/message.png\";\nimport ticketimg from \"../File/Icon/ticket.png\";\nimport edit from \"../File/Icon/edit.png\";\nimport postimg from \"../File/Icon/post.png\";\n\nconst Myflow = () => {\n  const userId = useParams().userId;\n\n  const [user, setrUser] = useState();\n  useEffect(() => {\n    const sendReq = async () => {\n      try {\n        const response = await fetch(\n          `http://localhost:5000/api/user/${userId}`\n        );\n\n        const responseData = await response.json();\n        console.log(responseData);\n        setrUser(responseData);\n      } catch (err) {}\n    };\n    sendReq();\n  }, []);\n\n  const [changeMode, setChangeMode] = useState(false);\n  const [changeMode2, setChangeMode2] = useState(false);\n  const [authState, inputhandler, setformData] = useForm(\n    {\n      name: {\n        value: user ? user.name : \"\",\n        isValid: false,\n      },\n    },\n    true\n  );\n  const [authState2, inputhandler2, setformData2] = useForm(\n    {\n      firstname: {\n        value: user ? user.firstname : \"\",\n        isValid: false,\n      },\n    },\n    true\n  );\n  const ChangeModeHandler1 = () => {\n    setformData(\n      {\n        name: {\n          value: authState.inputs.name.value,\n          isValid: true,\n        },\n      },\n      true\n    );\n    setChangeMode((prvMode) => !prvMode);\n  };\n  const ChangeModeHandler2 = () => {\n    setformData2(\n      {\n        firstname: {\n          value: authState2.inputs.firstname.value,\n          isValid: true,\n        },\n      },\n      true\n    );\n    setChangeMode2((prvMode) => !prvMode);\n  };\n  const userUpdateSubmitHandler = (e) => {\n    e.preventDefault();\n    //console.log(authState.inputs.name.value);\n    user.name = authState.inputs.name.value;\n    console.log(user.name);\n    console.log(user.firstname);\n    setChangeMode((prvMode) => !prvMode);\n  };\n  const userUpdateSubmitHandler2 = (e) => {\n    e.preventDefault();\n    //console.log(authState);\n    //console.log(authState2);\n    user.firstname = authState2.inputs.name.value;\n    console.log(user.name);\n    console.log(user.firstname);\n    setChangeMode2((prvMode) => !prvMode);\n  };\n  return (\n    <React.Fragment>\n      {user && (\n        <React.Fragment>\n          <div className=\"Page_User\">\n            <div className=\"user\">\n              <div className=\"user__pic\">\n                <Avatar image={user.img} alt={user.name} width=\"200px\" />\n              </div>\n              <div className=\"user__info\">\n                <div\n                  className=\"user__name\"\n                  style={{\n                    gridTemplateColumns: `${changeMode ? \"70px auto\" : \"\"}`,\n                  }}\n                >\n                  <p>Nom :</p>\n                  {!changeMode && (\n                    <React.Fragment>\n                      <p>{user.name}</p>\n                      <img\n                        src={edit}\n                        className=\"icon\"\n                        alt=\"edit\"\n                        style={{ opacity: 0.5 }}\n                        onClick={ChangeModeHandler1}\n                      />\n                    </React.Fragment>\n                  )}\n                  {changeMode && (\n                    <React.Fragment>\n                      <form\n                        className=\"changeparam\"\n                        onSubmit={userUpdateSubmitHandler}\n                      >\n                        <Input\n                          id=\"name\"\n                          element=\"input\"\n                          type=\"text\"\n                          validators={[VALIDATOR_REQUIRE()]}\n                          onInput={inputhandler}\n                          initialvalue={user.name}\n                          initialvalid\n                        />\n                        <button type=\"submit\" disabled={!authState.isValid}>\n                          Change\n                        </button>\n                      </form>\n                    </React.Fragment>\n                  )}\n                </div>\n                <div\n                  className=\"user__name\"\n                  style={{\n                    gridTemplateColumns: `${changeMode2 ? \"70px auto\" : \"\"}`,\n                  }}\n                >\n                  <p>Prenom :</p>\n                  {!changeMode2 && (\n                    <React.Fragment>\n                      <p>{user.firstname}</p>\n                      <img\n                        src={edit}\n                        className=\"icon\"\n                        alt=\"edit\"\n                        style={{ opacity: 0.5 }}\n                        onClick={ChangeModeHandler2}\n                      />\n                    </React.Fragment>\n                  )}\n                  {changeMode2 && (\n                    <React.Fragment>\n                      <form\n                        className=\"changeparam\"\n                        onSubmit={userUpdateSubmitHandler2}\n                      >\n                        <Input\n                          id=\"name\"\n                          element=\"input\"\n                          type=\"text\"\n                          validators={[VALIDATOR_REQUIRE()]}\n                          onInput={inputhandler2}\n                          initialvalue={user.firstname}\n                          initialvalid\n                        />\n                        <button type=\"submit\" disabled={!authState2.isValid}>\n                          Change\n                        </button>\n                      </form>\n                    </React.Fragment>\n                  )}\n                </div>\n                <div className=\"user__email\">\n                  <p>Email :</p>\n                  <p>{user.email}</p>\n                </div>\n                <div className=\"user__email\">\n                  <p>Username :</p>\n                  <p>{user.username}</p>\n                </div>\n                <div className=\"user__bio\">\n                  <p>{user.bio}</p>\n                </div>\n                <div className=\"user__likes\">\n                  {user.likes.map((like) => (\n                    <div className=\"likes\" key={like}>\n                      {like}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n            <div className=\"other\">\n              <div className=\"myposts\">\n                <NavLink to={`/${userId}/post`}>\n                  <img src={postimg} alt=\"post\" />\n                </NavLink>\n              </div>\n              <div className=\"mymessage\">\n                <NavLink to={`/${userId}/conv`}>\n                  <img src={messageimg} alt=\"message\" />\n                </NavLink>\n              </div>\n              <div className=\"mydemand\">\n                <NavLink to={`/${userId}/demand`}>\n                  <img src={ticketimg} alt=\"postimg\" />\n                </NavLink>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n\n      {!user && <div className=\"marhceap\">ff</div>}\n    </React.Fragment>\n  );\n};\n\nexport default Myflow;\n","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/Conv.js",["83","84"],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Nav/MainNav.js",[],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/Waitings.js",[],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/Input.js",["85"],"import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\n\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouch: true,\n      };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialvalue || \"\",\n    isTouch: false,\n    isValid: props.initialvalid || false,\n  });\n  useEffect(() => {\n    dispatch({\n      type: \"CHANGE\",\n      val: \"\",\n      validators: props.validators,\n    });\n  }, [props.onclear]);\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, onInput, value, isValid]);\n\n  const ChangeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={ChangeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.row || 9}\n        onChange={ChangeHandler}\n        value={inputState.value}\n        onBlur={touchHandler}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouch && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouch && props.errorText && (\n        <p>{props.errorText}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/Avatar.js",[],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Components/Shared/OneConv.js",[],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Hooks/form-hook.js",["86"],"import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      //console.log(action.inputs);\n      return {\n        inputs: action.inputs,\n        isValid: action.FormisValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialCalidity) => {\n  const [formState, dispacth] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialCalidity,\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispacth({\n      type: \"INPUT_CHANGE\",\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    //console.log(inputData);\n    //console.log(formValidity);\n    dispacth({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      FormisValid: formValidity,\n    });\n    console.log(formState);\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/util/validators.js",[],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Hooks/auth-hooks.js",[],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/Pages/Auth.js",["87","88"],"/Users/vincent/Downloads/Louis/Gat/WebGatsun/src/context/auth-context.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":21,"column":22,"nodeType":"95","messageId":"96","endLine":21,"endColumn":35},{"ruleId":"97","severity":1,"message":"98","line":28,"column":12,"nodeType":"99","endLine":28,"endColumn":65},{"ruleId":"97","severity":1,"message":"100","line":29,"column":17,"nodeType":"99","endLine":29,"endColumn":89},{"ruleId":"97","severity":1,"message":"101","line":112,"column":6,"nodeType":"102","endLine":112,"endColumn":8,"suggestions":"103"},{"ruleId":"97","severity":1,"message":"104","line":148,"column":6,"nodeType":"102","endLine":148,"endColumn":8,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"106","line":155,"column":6,"nodeType":"102","endLine":155,"endColumn":14,"suggestions":"107"},{"ruleId":"93","severity":1,"message":"108","line":179,"column":11,"nodeType":"95","messageId":"96","endLine":179,"endColumn":19},{"ruleId":"109","severity":1,"message":"110","line":269,"column":9,"nodeType":"111","endLine":269,"endColumn":28},{"ruleId":"93","severity":1,"message":"112","line":1,"column":38,"nodeType":"95","messageId":"96","endLine":1,"endColumn":44},{"ruleId":"97","severity":1,"message":"113","line":34,"column":6,"nodeType":"102","endLine":34,"endColumn":8,"suggestions":"114"},{"ruleId":"97","severity":1,"message":"113","line":26,"column":6,"nodeType":"102","endLine":26,"endColumn":8,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":63,"column":26,"nodeType":"118","messageId":"119","endLine":63,"endColumn":28},{"ruleId":"97","severity":1,"message":"120","line":37,"column":6,"nodeType":"102","endLine":37,"endColumn":21,"suggestions":"121"},{"ruleId":"97","severity":1,"message":"122","line":58,"column":6,"nodeType":"102","endLine":58,"endColumn":8,"suggestions":"123"},{"ruleId":"93","severity":1,"message":"124","line":6,"column":5,"nodeType":"95","messageId":"96","endLine":6,"endColumn":22},{"ruleId":"93","severity":1,"message":"125","line":13,"column":35,"nodeType":"95","messageId":"96","endLine":13,"endColumn":46},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'setisLoggedin' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'source' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useCallback has missing dependencies: 'convId' and 'myconv'. Either include them or remove the dependency array.","ArrayExpression",["128"],"React Hook useEffect has missing dependencies: 'convId' and 'getmsg'. Either include them or remove the dependency array.",["129"],"React Hook useEffect has a missing dependency: 'myconv'. Either include it or remove the dependency array.",["130"],"'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["131"],["132"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'props.validators'. Either include it or remove the dependency array.",["133"],"React Hook useCallback has a missing dependency: 'formState'. Either include it or remove the dependency array.",["134"],"'VALIDATOR_REQUIRE' is defined but never used.","'setformData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"141","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"Update the dependencies array to be: [convId, myconv]",{"range":"148","text":"149"},"Update the dependencies array to be: [convId, getmsg]",{"range":"150","text":"151"},"Update the dependencies array to be: [getmsg, myconv]",{"range":"152","text":"153"},"Update the dependencies array to be: [userId]",{"range":"154","text":"155"},{"range":"156","text":"155"},"Update the dependencies array to be: [props.onclear, props.validators]",{"range":"157","text":"158"},"Update the dependencies array to be: [formState]",{"range":"159","text":"160"},[3358,3360],"[convId, myconv]",[4484,4486],"[convId, getmsg]",[4629,4637],"[getmsg, myconv]",[968,970],"[userId]",[694,696],[779,794],"[props.onclear, props.validators]",[1514,1516],"[formState]"]